---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: k8s-system
spec:
  selector:
    app: kafka-service
  type: NodePort
  ports:
    - protocol: TCP
      port: 9092
      targetPort: 9092
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kafka-service
  name: kafka-service
  namespace: k8s-system
spec:
  serviceName: kafka-service
  replicas: 1
  selector:
    matchLabels:
      app: kafka-service
  template:
    metadata:
      labels:
        app: kafka-service
    spec:
      containers:
        - name: kafka-service
          image: docker.io/bitnami/kafka:3.7
          imagePullPolicy: IfNotPresent
          ports:
            - name: tcp
              containerPort: 9092
              protocol: TCP
          env:
            # KRaft settings
            - name: KAFKA_CFG_NODE_ID
              value: "0"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: "controller,broker"
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: "0@:9093"
            # Listeners
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:9093"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://:9092"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
          volumeMounts:
            - mountPath: /bitnami
              name: kafka-service-data
      volumes:
        - name: kafka-service-data
          persistentVolumeClaim:
            claimName: kafka-service-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-service-data
  namespace: k8s-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi